{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports       #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing       #-}
{-# OPTIONS_GHC -fno-warn-unused-matches       #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Grpc.Protobuf.Monitor where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
 
data MonitorService request
     response = MonitorService{monitorServiceGetHeartbeat ::
                               request 'HsGRPC.Normal Grpc.Protobuf.Monitor.HeartbeatRequest
                                 Grpc.Protobuf.Monitor.HeartbeatOkResponse
                                 ->
                                 Hs.IO
                                   (response 'HsGRPC.Normal
                                      Grpc.Protobuf.Monitor.HeartbeatOkResponse)}
              deriving Hs.Generic
 
monitorServiceServer ::
                       MonitorService HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                         HsGRPC.ServiceOptions -> Hs.IO ()
monitorServiceServer
  MonitorService{monitorServiceGetHeartbeat =
                   monitorServiceGetHeartbeat}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger
     serverMaxReceiveMessageLength serverMaxMetadataSize)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/monitor.MonitorService/GetHeartbeat")
                                   (HsGRPC.convertGeneratedServerHandler
                                      monitorServiceGetHeartbeat))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger,
                             optMaxReceiveMessageLength = serverMaxReceiveMessageLength,
                             optMaxMetadataSize = serverMaxMetadataSize})
 
monitorServiceClient ::
                       HsGRPC.Client ->
                         Hs.IO (MonitorService HsGRPC.ClientRequest HsGRPC.ClientResult)
monitorServiceClient client
  = (Hs.pure MonitorService) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/monitor.MonitorService/GetHeartbeat")))
 
data HeartbeatRequest = HeartbeatRequest{}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named HeartbeatRequest where
        nameOf _ = (Hs.fromString "HeartbeatRequest")
 
instance HsProtobuf.HasDefault HeartbeatRequest
 
instance HsProtobuf.Message HeartbeatRequest where
        encodeMessage _ HeartbeatRequest{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure HeartbeatRequest)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB HeartbeatRequest where
        toJSONPB (HeartbeatRequest) = (HsJSONPB.object [])
        toEncodingPB (HeartbeatRequest) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB HeartbeatRequest where
        parseJSONPB
          = (HsJSONPB.withObject "HeartbeatRequest"
               (\ obj -> (Hs.pure HeartbeatRequest)))
 
instance HsJSONPB.ToJSON HeartbeatRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON HeartbeatRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema HeartbeatRequest where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "HeartbeatRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype HeartbeatOkResponse = HeartbeatOkResponse{heartbeatOkResponseResponse
                                                  :: Hs.Text}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named HeartbeatOkResponse where
        nameOf _ = (Hs.fromString "HeartbeatOkResponse")
 
instance HsProtobuf.HasDefault HeartbeatOkResponse
 
instance HsProtobuf.Message HeartbeatOkResponse where
        encodeMessage _
          HeartbeatOkResponse{heartbeatOkResponseResponse =
                                heartbeatOkResponseResponse}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   heartbeatOkResponseResponse)])
        decodeMessage _
          = (Hs.pure HeartbeatOkResponse) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "response")
                []
                "")]
 
instance HsJSONPB.ToJSONPB HeartbeatOkResponse where
        toJSONPB (HeartbeatOkResponse f1)
          = (HsJSONPB.object ["response" .= f1])
        toEncodingPB (HeartbeatOkResponse f1)
          = (HsJSONPB.pairs ["response" .= f1])
 
instance HsJSONPB.FromJSONPB HeartbeatOkResponse where
        parseJSONPB
          = (HsJSONPB.withObject "HeartbeatOkResponse"
               (\ obj -> (Hs.pure HeartbeatOkResponse) <*> obj .: "response"))
 
instance HsJSONPB.ToJSON HeartbeatOkResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON HeartbeatOkResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema HeartbeatOkResponse where
        declareNamedSchema _
          = do let declare_response = HsJSONPB.declareSchemaRef
               heartbeatOkResponseResponse <- declare_response Proxy.Proxy
               let _ = Hs.pure HeartbeatOkResponse <*>
                         HsJSONPB.asProxy declare_response
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "HeartbeatOkResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("response",
                                                         heartbeatOkResponseResponse)]}})